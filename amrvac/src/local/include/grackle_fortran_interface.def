!=======================================================================
!
!
! Grackle fortran variable types
!
!
! Copyright (c) 2013, Enzo/Grackle Development Team.
!
! Distributed under the terms of the Enzo Public Licence.
!
! The full license is in the file LICENSE, distributed with this
! software.
!=======================================================================

c This file provides a FORTRAN interface to the grackle 3.0 API based
c   on C structs.  The following defines the three C structs that grackle
c   uses to pass data.  These must *exactly* match the corresponding C
c   definitions in grackle_types.h and grackle_chemistry_data.h.
c
c In addition, here we define the Fortran 90 interfaces to the C routines
c   using the 2003 Fortran C interoperability features.  Note that some
c   care must be taken defining matching types.

c     This is the fortran definition of grackle_units

      TYPE, BIND(C) :: grackle_units
         INTEGER(C_INT) :: comoving_coordinates
         REAL(C_DOUBLE) :: density_units
         REAL(C_DOUBLE) :: length_units
         REAL(C_DOUBLE) :: time_units
         REAL(C_DOUBLE) :: velocity_units
         REAL(C_DOUBLE) :: a_units
         REAL(C_DOUBLE) :: a_value
      END TYPE

c     This is the fortran definition of grackle_field_data

      TYPE, BIND(C) :: grackle_field_data
         INTEGER(C_INT) :: grid_rank
         TYPE(C_PTR) :: grid_dimension
         TYPE(C_PTR) :: grid_start
         TYPE(C_PTR) :: grid_end
         REAL(C_DOUBLE) :: grid_dx

         TYPE(C_PTR) :: density
         TYPE(C_PTR) :: HI_density
         TYPE(C_PTR) :: HII_density
         TYPE(C_PTR) :: HM_density
         TYPE(C_PTR) :: HeI_density
         TYPE(C_PTR) :: HeII_density
         TYPE(C_PTR) :: HeIII_density
         TYPE(C_PTR) :: H2I_density
         TYPE(C_PTR) :: H2II_density
         TYPE(C_PTR) :: DI_density
         TYPE(C_PTR) :: DII_density
         TYPE(C_PTR) :: HDI_density
         TYPE(C_PTR) :: e_density
         TYPE(C_PTR) :: metal_density
         TYPE(C_PTR) :: dust_density

         TYPE(C_PTR) :: internal_energy
         TYPE(C_PTR) :: x_velocity
         TYPE(C_PTR) :: y_velocity
         TYPE(C_PTR) :: z_velocity

         TYPE(C_PTR) :: volumetric_heating_rate
         TYPE(C_PTR) :: specific_heating_rate

         TYPE(C_PTR) :: RT_heating_rate
         TYPE(C_PTR) :: RT_HI_ionization_rate
         TYPE(C_PTR) :: RT_HeI_ionization_rate
         TYPE(C_PTR) :: RT_HeII_ionization_rate
         TYPE(C_PTR) :: RT_H2_dissociation_rate

         TYPE(C_PTR) :: H2_self_shielding_length
         TYPE(C_PTR) :: H2_custom_shielding_factor

         TYPE(C_PTR) :: isrf_habing
      END TYPE

      TYPE, BIND(C) :: grackle_inout
         TYPE(C_PTR) :: uenergy_density
         REAL(C_DOUBLE) :: dx_local
         REAL(C_DOUBLE) :: dtchem
         INTEGER(C_INT) :: ixOmin1
         INTEGER(C_INT) :: ixOmax1
         INTEGER(C_INT) :: ixOmin2
         INTEGER(C_INT) :: ixOmax2

         TYPE(C_PTR) :: final_temp
         TYPE(C_PTR) :: final_cooltime
         TYPE(C_PTR) :: final_press
         TYPE(C_PTR) :: final_gamma
      END TYPE

c     This is the fortran definition of chemistry_data

      TYPE, BIND(C) :: chemistry_data
         INTEGER(C_INT) :: use_grackle
         INTEGER(C_INT) :: with_radiative_cooling
         INTEGER(C_INT) :: primordial_chemistry
         INTEGER(C_INT) :: dust_chemistry
         INTEGER(C_INT) :: metal_cooling
         INTEGER(C_INT) :: UVbackground
         TYPE(C_PTR)    :: grackle_data_file
         INTEGER(C_INT) :: cmb_temperature_floor
         REAL(C_DOUBLE) :: Gamma
         INTEGER(C_INT) :: h2_on_dust
         INTEGER(C_INT) :: use_dust_density_field
         INTEGER(C_INT) :: dust_recombination_cooling
         INTEGER(C_INT) :: photoelectric_heating
         REAL(C_DOUBLE) :: photoelectric_heating_rate
         INTEGER(C_INT) :: use_isrf_field
         REAL(C_DOUBLE) :: interstellar_radiation_field
         INTEGER(C_INT) :: use_volumetric_heating_rate
         INTEGER(C_INT) :: use_specific_heating_rate
         INTEGER(C_INT) :: three_body_rate
         INTEGER(C_INT) :: cie_cooling
         INTEGER(C_INT) :: h2_optical_depth_approximation
         INTEGER(C_INT) :: ih2co
         INTEGER(C_INT) :: ipiht
         REAL(C_DOUBLE) :: HydrogenFractionByMass
         REAL(C_DOUBLE) :: DeuteriumToHydrogenRatio
         REAL(C_DOUBLE) :: SolarMetalFractionByMass
         REAL(C_DOUBLE) :: local_dust_to_gas_ratio;
         INTEGER(C_INT) :: NumberOfTemperatureBins
         INTEGER(C_INT) :: CaseBRecombination
         REAL(C_DOUBLE) :: TemperatureStart
         REAL(C_DOUBLE) :: TemperatureEnd
         INTEGER(C_INT) :: NumberOfDustTemperatureBins
         REAL(C_DOUBLE) :: DustTemperatureStart
         REAL(C_DOUBLE) :: DustTemperatureEnd
         INTEGER(C_INT) :: Compton_xray_heating
         INTEGER(C_INT) :: LWbackground_sawtooth_suppression
         REAL(C_DOUBLE) :: LWbackground_intensity
         REAL(C_DOUBLE) :: UVbackground_redshift_on
         REAL(C_DOUBLE) :: UVbackground_redshift_off
         REAL(C_DOUBLE) :: UVbackground_redshift_fullon
         REAL(C_DOUBLE) :: UVbackground_redshift_drop
         REAL(C_DOUBLE) :: cloudy_electron_fraction_factor
         INTEGER(C_INT) :: use_radiative_transfer
         INTEGER(C_INT) :: radiative_transfer_coupled_rate_solver
         INTEGER(C_INT) :: radiative_transfer_intermediate_step
         INTEGER(C_INT) :: radiative_transfer_hydrogen_only
         INTEGER(C_INT) :: self_shielding_method
         INTEGER(C_INT) :: H2_self_shielding
         INTEGER(C_INT) :: H2_custom_shielding
         INTEGER(C_INT) :: h2_charge_exchange_rate
         INTEGER(C_INT) :: h2_dust_rate
         INTEGER(C_INT) :: h2_h_cooling_rate
         INTEGER(C_INT) :: collisional_excitation_rates
         INTEGER(C_INT) :: collisional_ionisation_rates
         INTEGER(C_INT) :: recombination_cooling_rates
         INTEGER(C_INT) :: bremsstrahlung_cooling_rates
         REAL(C_DOUBLE) :: Tlow
cc       INTEGER(C_INT) :: omp_nthreads // not supported in fortran
      END TYPE
      
c     This is the fortran definition of UVBtable

      TYPE, BIND(C) :: UVBtable
         INTEGER(C_LONG_LONG) :: Nz

         REAL(C_DOUBLE) :: zmin
         REAL(C_DOUBLE) :: zmax
         TYPE(C_PTR) :: z

         TYPE(C_PTR) :: k24
         TYPE(C_PTR) :: k25
         TYPE(C_PTR) :: k26

         TYPE(C_PTR) :: k27
         TYPE(C_PTR) :: k28
         TYPE(C_PTR) :: k29
         TYPE(C_PTR) :: k30
         TYPE(C_PTR) :: k31

         TYPE(C_PTR) :: piHI
         TYPE(C_PTR) :: piHeI
         TYPE(C_PTR) :: piHeII

         TYPE(C_PTR) :: crsHI
         TYPE(C_PTR) :: crsHeI
         TYPE(C_PTR) :: crsHeII
      END TYPE

c     This is the fortran definition of cloudy_data

      TYPE, BIND(C) :: cloudy_data
         INTEGER(C_LONG_LONG) :: grid_rank
         TYPE(C_PTR) :: grid_dimension
         TYPE(C_PTR) :: grid_parameters
         TYPE(C_PTR) :: heating_data
         TYPE(C_PTR) :: cooling_data
         TYPE(C_PTR) :: mmw_data
         INTEGER(C_LONG_LONG) :: data_size
      END TYPE      

c     This is the fortran definition of chemistry_data_storage

      TYPE, BIND(C) :: chemistry_data_storage
         TYPE(C_PTR) :: k1
         TYPE(C_PTR) :: k2
         TYPE(C_PTR) :: k3
         TYPE(C_PTR) :: k4
         TYPE(C_PTR) :: k5
         TYPE(C_PTR) :: k6

         TYPE(C_PTR) :: k7
         TYPE(C_PTR) :: k8
         TYPE(C_PTR) :: k9
         TYPE(C_PTR) :: k10
         TYPE(C_PTR) :: k11
         TYPE(C_PTR) :: k12
         TYPE(C_PTR) :: k13
         TYPE(C_PTR) :: k14
         TYPE(C_PTR) :: k15
         TYPE(C_PTR) :: k16
         TYPE(C_PTR) :: k17
         TYPE(C_PTR) :: k18
         TYPE(C_PTR) :: k19
         TYPE(C_PTR) :: k20
         TYPE(C_PTR) :: k21
         TYPE(C_PTR) :: k22
         TYPE(C_PTR) :: k23
         TYPE(C_PTR) :: k13dd

         REAL(C_DOUBLE) :: k24
         REAL(C_DOUBLE) :: k25
         REAL(C_DOUBLE) :: k26

         REAL(C_DOUBLE) :: k27
         REAL(C_DOUBLE) :: k28
         REAL(C_DOUBLE) :: k29
         REAL(C_DOUBLE) :: k30
         REAL(C_DOUBLE) :: k31

         TYPE(C_PTR) :: k50
         TYPE(C_PTR) :: k51
         TYPE(C_PTR) :: k52
         TYPE(C_PTR) :: k53
         TYPE(C_PTR) :: k54
         TYPE(C_PTR) :: k55
         TYPE(C_PTR) :: k56

         TYPE(C_PTR) :: k57
         TYPE(C_PTR) :: k58

         TYPE(C_PTR) :: h2dust

         TYPE(C_PTR) :: n_cr_n
         TYPE(C_PTR) :: n_cr_d1
         TYPE(C_PTR) :: n_cr_d2

         TYPE(C_PTR) :: ceHI
         TYPE(C_PTR) :: ceHeI
         TYPE(C_PTR) :: ceHeII
         TYPE(C_PTR) :: ciHI
         TYPE(C_PTR) :: ciHeI
         TYPE(C_PTR) :: ciHeIS
         TYPE(C_PTR) :: ciHeII
         TYPE(C_PTR) :: reHII
         TYPE(C_PTR) :: reHeII1
         TYPE(C_PTR) :: reHeII2
         TYPE(C_PTR) :: reHeIII
         TYPE(C_PTR) :: brem
         REAL(C_DOUBLE) :: comp
         REAL(C_DOUBLE) :: comp_xray
         REAL(C_DOUBLE) :: temp_xray

         REAL(C_DOUBLE) :: piHI
         REAL(C_DOUBLE) :: piHeI
         REAL(C_DOUBLE) :: piHeII

         REAL(C_DOUBLE) :: crsHI
         REAL(C_DOUBLE) :: crsHeI
         REAL(C_DOUBLE) :: crsHeII

         TYPE(C_PTR) :: hyd01k
         TYPE(C_PTR) :: h2k01
         TYPE(C_PTR) :: vibh
         TYPE(C_PTR) :: roth
         TYPE(C_PTR) :: rotl
         TYPE(C_PTR) :: GP99LowDensityLimit
         TYPE(C_PTR) :: GP99HighDensityLimit

         TYPE(C_PTR) :: GAHI
         TYPE(C_PTR) :: GAH2
         TYPE(C_PTR) :: GAHe
         TYPE(C_PTR) :: GAHp
         TYPE(C_PTR) :: GAel

         TYPE(C_PTR) :: H2LTE

         TYPE(C_PTR) :: HDlte
         TYPE(C_PTR) :: HDlow

         TYPE(C_PTR) :: cieco

         REAL(C_DOUBLE) :: gammah

         TYPE(C_PTR) :: regr

         REAL(C_DOUBLE) :: gamma_isrf

         TYPE(C_PTR) :: gas_grain

         INTEGER(C_INT) :: cloudy_data_new
      END TYPE

      TYPE, BIND(C) :: GPStruct

         INTEGER(C_LONG_LONG) :: size1
         TYPE(C_PTR) :: size2
         TYPE(C_PTR) :: grid_parameters_oned
      END TYPE

c     The following define the fortran interfaces to the C routines

      INTERFACE
         REAL(C_DOUBLE) FUNCTION get_temperature_units(my_units)
     &        bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
         END FUNCTION get_temperature_units
      END INTERFACE

      INTERFACE
         REAL(C_DOUBLE) FUNCTION get_velocity_units(my_units)
     &        bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
         END FUNCTION get_velocity_units
      END INTERFACE

      INTERFACE
         SUBROUTINE set_velocity_units(my_units) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(INOUT) :: my_units
         END SUBROUTINE set_velocity_units
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION set_default_chemistry_parameters
     &        (my_grackle) bind(C)
            IMPORT
            TYPE(chemistry_data), INTENT(INOUT) :: my_grackle
         END FUNCTION set_default_chemistry_parameters
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION initialize_chemistry_data(my_units)
     &        bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(INOUT) :: my_units
         END FUNCTION initialize_chemistry_data
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION solve_chemistry
     &        (my_units, my_fields, dt) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(IN) :: dt
         END FUNCTION solve_chemistry
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_cooling_time(my_units,
     &        my_fields, cooling_time) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: cooling_time(*)
         END FUNCTION calculate_cooling_time
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_temperature(my_units,
     &        my_fields, temperature) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: temperature(*)
         END FUNCTION calculate_temperature
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_pressure(my_units, my_fields,
     &        pressure) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: pressure(*)
         END FUNCTION calculate_pressure
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_gamma(my_units, my_fields,
     &        gamma) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: gamma(*)
         END FUNCTION calculate_gamma
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION calculate_dust_temperature(my_units,
     &        my_fields, dust_temperature) bind(C)
            IMPORT
            TYPE(grackle_units), INTENT(IN) :: my_units
            TYPE(grackle_field_data), INTENT(IN) :: my_fields
            REAL(C_DOUBLE), INTENT(OUT) :: dust_temperature(*)
         END FUNCTION calculate_dust_temperature
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION free_chemistry_data() bind(C)
            IMPORT
         END FUNCTION free_chemistry_data
      END INTERFACE

      INTERFACE
         TYPE(chemistry_data) FUNCTION chemdefaultparams()
     &        bind(C, name="_set_default_chemistry_parameters")
            IMPORT
         END FUNCTION chemdefaultparams
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION initchemdata(my_chemistry,
     &        my_rates,my_units,UVBTble,cloudy_primordial,
     &        cloudy_metal, GPS_primordial, GPS_metal)
     &        bind(C, name="initchemdata")
            IMPORT
            TYPE(grackle_units), INTENT(INOUT) :: my_units
            TYPE(chemistry_data), INTENT(INOUT) :: my_chemistry
            TYPE(chemistry_data_storage), INTENT(INOUT) :: my_rates
            TYPE(UVBtable), INTENT(INOUT) :: UVBTble
            TYPE(cloudy_data), INTENT(INOUT) :: cloudy_primordial
            TYPE(cloudy_data), INTENT(INOUT) :: cloudy_metal
            TYPE(GPStruct), INTENT(INOUT) :: GPS_primordial
            TYPE(GPStruct), INTENT(INOUT) :: GPS_metal
         END FUNCTION initchemdata
      END INTERFACE

      INTERFACE
         INTEGER(C_INT) FUNCTION c_calculate_cooling_time(my_chemistry,
     &        my_rates,my_fields,my_units,UVBTble,cloudy_primordial,
     &        cloudy_metal, GPS_primordial, GPS_metal,cooling_time)
     &        bind(C, name="c_calculate_cooling_time")
            IMPORT
            TYPE(grackle_units), INTENT(INOUT) :: my_units
            TYPE(chemistry_data), INTENT(INOUT) :: my_chemistry
            TYPE(chemistry_data_storage), INTENT(INOUT) :: my_rates
            TYPE(grackle_field_data), INTENT(INOUT) :: my_fields
            TYPE(UVBtable), INTENT(INOUT) :: UVBTble
            TYPE(cloudy_data), INTENT(INOUT) :: cloudy_primordial
            TYPE(cloudy_data), INTENT(INOUT) :: cloudy_metal
            TYPE(GPStruct), INTENT(INOUT) :: GPS_primordial
            TYPE(GPStruct), INTENT(INOUT) :: GPS_metal
            REAL(C_DOUBLE), INTENT(OUT) :: cooling_time(*)
         END FUNCTION c_calculate_cooling_time
      END INTERFACE