;===========================================================================
;    Written by G. Toth for the Versatile Advection Code.
;
;    Read pictures from one or more ascii or binary ini or out file and 
;    plot or animate one or more functions of w using different plotting 
;    routines. The functions are defined in the "Idl/animfunc.pro" file.
;
;    For generalized coordinates the variables can be interpolated from the 
;    irregular grid onto a regular one, or to polar coordinates.
;
;    A subset can be cut from the grid by using the "cut" index array, e.g.:
;    cut=grid(10:30,*), where "grid" contains the full index array.
;    for the regular grid. The grid array is only defined after animate ran.
;
;    Usage:
;
; .r animate
;
;===========================================================================

   print, 'HAHHAHHHHHHH'
   print,'======= CURRENT ANIMATION PARAMETERS ================'
   print,'firstpict=',firstpict,', dpict=',dpict,$
        ', npictmax=',npictmax,', savemovie (y/n)=',savemovie,$
        FORMAT='(a,i4,a,i4,a,i4,a,a)'
   print,'ax,az=',ax,',',az,', contourlevel=',contourlevel,$
         ', velvector=',velvector,', velspeed (0..5)=',velspeed,$
        FORMAT='(a,i4,a,i3,a,i3,a,i4,a,i2)'
   if keyword_set(multiplot) then begin
        siz=size(multiplot)
        if siz(0) eq 0 then multiplot=[multiplot,1,1]
        print,'multiplot= ',multiplot,', axistype (coord/cells)=',axistype,$
        FORMAT='(a,"[",i2,",",i2,",",i2,"]",a,a)'
   endif else $
        print,'multiplot= 0 (default), axistype (coord/cells)=',axistype,$
              FORMAT='(a,a)'
   print,'bottomline=',bottomline,', headerline=',headerline,$
        FORMAT='(a,i1,a,i1)'

   if keyword_set(cut) then help,cut
   if keyword_set(wsubtract) then help,wsubtract
   if keyword_set(velpos) then help,velpos
   velpos0 = velpos

   print,'======= FILE DESCRIPTION ============================'
   nfile=0
   if filename eq '' and logfilename ne '' then begin
      filename=logfilename
      while strpos(filename,'.log') ge 0 $
         do strput,filename,'.out',strpos(filename,'.log')
      askstr,'filename(s)   ',filename,1
   endif else $
      askstr,'filename(s)   ',filename,doask

   str2arr,filename,filenames,nfile
   gettype,filenames,filetypes,npictinfiles
   print,'filetype(s)   =',filetypes
   print,'npictinfile(s)=',npictinfiles

   ;====== OPEN FILE(S) AND READ AND PRINT HEADER(S)

   str2arr,physics,physicss,nfile
   physics=''
   anygencoord=0
   for ifile=0,nfile-1 do begin
      openfile,1,filenames(ifile),filetypes(ifile)
      phys=physicss(ifile)
      gethead,1,filetypes(ifile),phys, $
         headline,it,time,gencoord,ndim,neqpar,nw,nx,eqpar,variables
      anygencoord=anygencoord or gencoord
      print,         'headline                  =',strtrim(headline,2)
      print,FORMAT='("variables                 =",100(a," "),$)',variables
      print,FORMAT='(" (ndim=",i2,", nw=",i2,")")',ndim,nw
      askstr,'physics (e.g. mhd12)      ',phys,doask
      physicss(ifile)=phys
      physics=physics + phys + ' '
   endfor

   print,'======= PLOTTING PARAMETERS ========================='
   readplotpar,ndim,cut,cut0,plotdim,nfunc,func,funcs,funcs1,funcs2,$
      plotmode,plotmodes,plottitle,plottitles,autorange,autoranges,doask

   readtransform,ndim,nx,anygencoord,transform,nxreg,wregpad,$
                 physicss(nfile-1),nvector,vectors,grid,doask

   print,'======= DETERMINE PLOTTING RANGES ==================='

   readlimits,nfunc,funcs,autoranges,noautorange,fmax,fmin,doask

   if noautorange then begin
      npict=(min(npictinfiles)-firstpict)/dpict+1
      if npict gt npictmax then npict=npictmax
      if npict lt 0 then npict=0
   endif else begin
      npict=0
      for ifile=0,nfile-1 do $
         openfile,ifile+1,filenames(ifile),filetypes(ifile)
      error=0
      while npict lt npictmax and not error do begin
         if npict eq 0 then nextpict=firstpict else nextpict=dpict
         for ifile=0,nfile-1 do begin
            getpict,ifile+1,filetypes(ifile),nextpict,x,w,$
               headline,it,time,gencoord,ndim,neqpar,nw,nx,eqpar,variables,err 
            if keyword_set(wsubtract) then w=w-wsubtract
            wnames=variables(ndim:ndim+nw-1)
            usereg=(not gencoord and transform eq 'unpolar') or $
               (gencoord and (transform eq 'polar' or transform eq 'regular' $
                              or transform eq 'sphere'))
            error=err or error

            if not error then begin
               if usereg then case transform of
	          'regular':regulargrid,x_old,nxreg_old,x,xreg,nxreg,dxreg, $
                                     w,wreg,nw,w(0,0,*),triangles
		  'polar'  :polargrid  ,nvector,vectors,x,w,xreg,wreg
		  'sphere' :spheregrid  ,nvector,vectors,x,w,xreg,wreg
		  'unpolar':unpolargrid,nvector,vectors,x,w,xreg,wreg
	       endcase

               first= npict eq 0 and ifile eq 0
               getlimits,first,nfunc,funcs,funcs1,funcs2,autoranges,fmax,fmin,$
                  doask,x,w,xreg,wreg,usereg,physicss(ifile),eqpar,wnames,cut0

               if ifile eq nfile-1 then begin
                  if npict eq 0 then print,FORMAT='("ipict:    ",$)'
                  print,FORMAT='(i4,$)',firstpict+npict*dpict
                  npict=npict+1
               endif
            endif
         endfor
      endwhile
      print
      for ifunc=0,nfunc-1 do $
      print,'Min and max value for ',funcs(ifunc),':',fmin(ifunc),fmax(ifunc)

   endelse
   print,'npict=',npict
   if npict eq 0 then begin
      print,'There are no frames to animate!'
      print,'   Check firstpict=',firstpict,' and dpict=',dpict
      if min(npictinfiles) lt firstpict then $
      print,'   The value of firstpict is larger than the minimum of' 
      print,'   npictinfiles=',npictinfiles
      retall
   endif

   ;===== DO ANIMATION IN MULTIX * MULTIY MULTIPLE WINDOWS

   if keyword_set(multiplot) then begin
      multix=multiplot(0)
      multiy=multiplot(1)
      multidir=multiplot(2)
      npict1=(multix*multiy)/(nfunc*nfile)
      if npict1 eq 0 then npict1=1
   endif else if nfile eq 1 then begin
      multix=long(sqrt(nfunc-1)+1)
      multiy=long((nfunc-1)/multix+1)
      multidir=0
      npict1=1
   endif else begin
      multix=nfile
      multiy=nfunc
      multidir=1
      npict1=1
   endelse

   if printmovie eq 'y' then set_plot,'PS',/INTERPOLATE

   if (printmovie eq 'y' or savemovie eq 'y') and $
      (npict-1)/npict1+1 gt nplotmax then begin
      print,'For printing npict is too much :',npict
      print,'Reducing npict back to nplotmax:',nplotmax
      npict=nplotmax*npict1
   endif

   doanimate= npict gt npict1 and !d.name eq 'X'
   if doanimate then xinteranimate,set=[!d.x_size,!d.y_size,(npict-1)/npict1+1]
   if !d.name eq 'X' and !d.window ge 0 then wshow

   ipict=0
   ipict1=0
   iplot=0
   for ifile=0,nfile-1 do openfile,ifile+1,filenames(ifile),filetypes(ifile)
   error=0
   while ipict lt npict and not error do begin
      if ipict1 eq 0 then begin
         if not keyword_set(noerase) then erase
         !p.multi=[0,multix,multiy,0,multidir]
         if printmovie eq 'y' then $
            device,filename='Movie/'+strtrim(string(iplot+1),2)+'.ps',$
		   XSIZE=24,YSIZE=18,/LANDSCAPE,/COLOR,BITS=8
      endif

      if ipict eq 0 then print,FORMAT='("ipict:    ",$)'
      print,FORMAT='(i4,$)',firstpict+ipict*dpict
      if ipict eq 0 then nextpict=firstpict else nextpict=dpict
      for ifile=0,nfile-1 do begin

         if npict gt 1 or nfile gt 1 or noautorange then begin
            getpict,ifile+1,filetypes(ifile),nextpict,x,w,$
               headline,it,time,gencoord,ndim,neqpar,nw,nx,eqpar,variables,err
            if keyword_set(wsubtract) then w=w-wsubtract
            wnames=variables(ndim:ndim+nw-1)
            usereg=(not gencoord and transform eq 'unpolar') or $
               (gencoord and (transform eq 'polar' or transform eq 'regular' $
                              or transform eq 'sphere'))
            error=error or err
         endif

         if not error then begin
            if usereg then case transform of
		'regular':regulargrid,x_old,nxreg_old,x,xreg,nxreg,dxreg, $
				w,wreg,nw,wregpad,triangles
		'polar'  :begin
                            polargrid,nvector,vectors,x,w,xreg,wreg
                            variables(0:1)=['r','phi']
                          end
		'sphere' :begin
			    spheregrid  ,nvector,vectors,x,w,xreg,wreg
			    variables(0:2)=['r','theta','phi']
			  end
		'unpolar':begin
                            unpolargrid,nvector,vectors,x,w,xreg,wreg
                            variables(0:1)=['x','y']
                          end
            endcase

	    linestyle=0
            if multix*multiy lt nfunc*nfile then linestyle=ifile

            plotfunc,x,w,xreg,wreg,usereg,ndim,physicss(ifile),eqpar,$
              variables,wnames,axistype,plotmodes,plottitles,$
              ax,az,contourlevel,linestyle,$
	      velvector,velspeed,velseed,velpos,velx,vely,veltri,$
              cut,cut0,plotdim,$
              nfunc,multix,multiy,plotix,plotiy,funcs,funcs1,funcs2,fmin,fmax,f

            if npict1 le 1 then begin
               putbottom,multix,multiy,ifile,0,bottomline,nx,it,time
               putheader,nfile,1,ifile,0,headerline,headline,nx
            endif else begin
               putbottom,multix,multiy,plotix,plotiy,bottomline,nx,it,time
               if ipict1 eq 0 then $
                  putheader,nfile,1,ifile,0,headerline,headline,nx
            endelse
         endif
      endfor

      if ipict1 eq npict1-1 or ipict eq npict-1 then begin
         if doanimate then $
            xinteranimate,frame=iplot,window=!d.window
         if printmovie eq 'y' then begin
            print,FORMAT='(" (Movie/",i2,".ps)",$)',iplot+1
            device,/close
         endif
         if savemovie eq 'y' then begin
            ;print,FORMAT='(" (Movie/",i2,".gif)",$)',iplot+1
            print,FORMAT='(" (Movie/frame",i2,".png)",$)',firstpict+iplot+1
            if iplot+1 lt 10 then begin
               numstring='00'+strtrim(string(firstpict+iplot+1),1)
            endif else if iplot+1 lt 100 then begin
               numstring='0'+strtrim(string(firstpict+iplot+1),2)
            endif else begin
               numstring='strtrim(string(firstpict+iplot+1),3)
            endelse
            write_gif,'Movie/'+numstring+'.gif',tvrd()
            write_png,'Movie/frame'+numstring+'.png',tvrd()
            write_tiff,'Movie/frame'+numstring+'.tiff',tvrd()
         endif
      endif

      ipict1=ipict1+1
      if ipict1 ge npict1 then begin
         ipict1=0
         iplot=iplot+1
      endif
      ipict=ipict+1

   endwhile

   for ifile=1,nfile do close,ifile
   print
   !p.multi=0
   !p.title=''
   !x.title=''
   !y.title=''
   !z.title=''
   if printmovie eq 'y' then set_plot,'X'
   ; Restore velpos array
   velpos=velpos0 & velpos0=0
   if doanimate then xinteranimate,5,/keep_pixmaps
end
