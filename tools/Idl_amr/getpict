;===========================================================================
;    Read the npict-th picture from an ascii or binary ini or out file 
;
;    Usage: 
;
; .r getpict
;
;    "getpict" will prompt you for "filename(s)" and "npict"
;    unless they are already set. Previous settings can be erased by 
;
; .r defaults
;
;    or modified explicitly, e.g.:
;
; filename='data/example.ini'
; npict=1
;
;    The "x" and "w" arrays and the header info will be read from the file. 
;
;    If a file is read with generalized coordinates, "gencoord=1" is set,
;    and the original data is transformed according to the "transform"
;    string variable into "xreg" and "wreg".
;
;    The same npict-th snapshot can be read from 2 or 3 files by e.g. setting
;
; filename='data/file1.ini data/file2.out'
;
;    In this case the data is read into x0,w0 and x1,w1 for the two files,
;    and possibly transformeed into wreg0,wreg1.
;
;    To plot a variable, type e.g.:
;
; surface,w(*,*,2)
;
;    or 
;
; .r plotfunc
;
;===========================================================================

nfile=0
if filename eq '' and logfilename ne '' then begin
   filename=logfilename
   while strpos(filename,'.log') ge 0 $
      do strput,filename,'.out',strpos(filename,'.log')
   askstr,'filename(s)   ',filename,1
endif else $
   askstr,'filename(s)   ',filename,doask
str2arr,filename,filenames,nfile
if nfile gt 3 then begin
   print,'Error in GetPict: cannot handle more than 3 files.'
   retall
endif
gettype,filenames,filetypes,npictinfiles
print,'filetype(s)   =','',filetypes
print,'npictinfile(s)=',npictinfiles
if max(npictinfiles) eq 1 then npict=1
asknum,'npict',npict,doask
print


str2arr,physics,physicss,nfile
physics=''
for ifile=0,nfile-1 do begin
   ; Read header info from file

   openfile,1,filenames(ifile),filetypes(ifile)
   phys=physicss(ifile)
   gethead,1,filetypes(ifile),phys, $
      headline,it,time,gencoord,ndim,neqpar,nw,nx,eqpar,variables,$
      nxamr,corneramr,infoamr,ngrids
   print
   if nfile gt 1 then print,'filename  =',filenames(ifile)
   print,         'headline  =',strtrim(headline,2)
   print,FORMAT='("ndim      =",i2,", neqpar=",i2,", nw=",i2)',ndim,neqpar,nw
   if gencoord eq 1 then print,'Generalized coordinates'
   print,FORMAT='("nx        = ",3(i5))',nx
   print,         'eqpar     =',eqpar
   print,         'variables =',variables
   askstr,'physics (eg. mhd12)',phys,doask
   physicss(ifile)=phys
   physics=physics + phys + ' '

   ; Read data from file

   openfile,1,filenames(ifile),filetypes(ifile)
   ; ***AMR: specific amr info added to getpict-call
   getpict,1,filetypes(ifile),npict,x,w,headline,it,time,$
           gencoord,ndim,neqpar,nw,nx,eqpar,variables,error,$
           nxamr,corneramr,infoamr,xamr,wamr,ngrids,1

   print,         'it      =',it,', time=',time

   if nfile gt 1 then begin
     case ifile of
     0: begin
          w0=w
          x0=x
        end
     1: begin
          w1=w
          x1=x
        end
     2: begin
          w2=w
          x2=x
        end
     endcase
     print,'Read x',ifile,' and w',ifile,FORMAT='(a,i1,a,i1)'
   endif else print,'Read x and w'

; ***AMR: skip transformations 
 if (filetypes(ifile) eq 'ascii_amr') or  $
    (filetypes(ifile) eq 'bin_amr'  ) then begin
   print,'Getpict: No transformations allowed for AMR files'
   print,'setting transform to amr'
   transform='amr'
 endif else begin
   readtransform,ndim,nx,gencoord,transform,nxreg,wregpad,$
		physics,nvector,vectors,grid,doask

   if (gencoord and (transform eq 'polar' or transform eq 'regular')) or $
      (not gencoord and transform eq 'unpolar') then begin
      if nfile eq 1 then $
           print,'...transform to xreg and wreg' $
      else print,'...transform to xreg and wreg',ifile,FORMAT='(a,i1)'
      case transform of
         'regular':regulargrid,x_old,nxreg_old,x,xreg,nxreg,dxreg,$
                     w,wreg,nw,wregpad,triangles
         'polar'  :begin
                     polargrid,nvector,vectors,x,w,xreg,wreg
                     variables(0:1)=['r','phi']
                   end
	 'unpolar':begin
                     unpolargrid,nvector,vectors,x,w,xreg,wreg
                     variables(0:1)=['x','y']
                   end
         else     :print,'Unknown value for transform:',transform
      endcase

      if nfile gt 1 then case ifile of
         0: wreg0=wreg
         1: wreg1=wreg
         2: wreg2=wreg
      endcase
   endif
; ***AMR: close if/else
 endelse
endfor
close,1

; Produce a wnames from the last file
wnames=variables(ndim:ndim+nw-1)


if transform eq 'amr' then begin
   if n_elements(iextrapol) eq 0 then iextrapol=0
   asknum,'extrapolate to single grid (0/1/2)       ',iextrapol,doask
   if iextrapol eq 1 then begin
      extrapolateamr,x,w,ndim,nw,nx,nxamr,corneramr,xamr,wamr,ngrids,nexp,islope,doask
      transform='single'
      plotmode=''
   endif
   if iextrapol eq 2 then begin
      extrapolateamr3d,x,w,ndim,nw,nx,nxamr,corneramr,xamr,wamr,ngrids
      transform='single'
      plotmode=''
   endif
endif


if transform eq 'amr' and ndim eq 3 then begin
   icut3dto2d=0
   asknum,'cut 3d to 2d (0/1)         ',icut3dto2d,doask
   if icut3dto2d eq 1 then begin
      cutx=0
      cuty=0
      cutz=0
      asknum,'cut at constant x (0/1)',cutx,doask
      if (cutx+cuty+cutz) ne 1 then $
         asknum,'cut at constant y (0/1)',cuty,doask
      if (cutx+cuty+cutz) ne 1 then $
         asknum,'cut at constant z (0/1)',cutz,doask
      vcutx=0.0
      vcuty=0.0
      vcutz=0.0
      if cutx eq 1 then asknum,'x-value for cut ',vcutx,doask
      if cuty eq 1 then asknum,'y-value for cut ',vcuty,doask
      if cutz eq 1 then asknum,'z-value for cut ',vcutz,doask
      ndimin=ndim
      nxamrin=nxamr
      corneramrin=corneramr
      infoamrin=infoamr
      xamrin=xamr
      wamrin=wamr
      ngridsin=ngrids
      cut3dto2d_amr, $
       ndimin,nxamrin,corneramrin,infoamrin,xamrin,wamrin,ngridsin,cutx,vcutx,$
       cuty,vcuty,cutz,vcutz,nw,ndim,nxamr,corneramr,infoamr,xamr,wamr,ngrids
      domainset=0
      plotmode=''
      print,'adjust physics if needed'
   endif
endif

if transform eq 'amr' and ndim eq 2 then begin
   icut2dto1d=0
   asknum,'cut 2d to 1d (0/1)         ',icut2dto1d,doask
   if icut2dto1d eq 1 then begin
      cutx=0
      cuty=0
      asknum,'cut at constant x (0/1)',cutx,doask
      if (cutx+cuty) ne 1 then $
         asknum,'cut at constant y (0/1)',cuty,doask
      vcutx=0.0
      vcuty=0.0
      if cutx eq 1 then asknum,'x-value for cut ',vcutx,doask
      if cuty eq 1 then asknum,'y-value for cut ',vcuty,doask
      ndimin=ndim
      nxamrin=nxamr
      corneramrin=corneramr
      infoamrin=infoamr
      xamrin=xamr
      wamrin=wamr
      ngridsin=ngrids
      cut2dto1d_amr, $
       ndimin,nxamrin,corneramrin,infoamrin,xamrin,wamrin,ngridsin,cutx,vcutx,$
       cuty,vcuty,nw,ndim,nxamr,corneramr,infoamr,xamr,wamr,ngrids
      domainset=0
      plotmode=''
      print,'adjust physics if needed'
      askstr,'new physics :',physics,1
   endif
endif

end

