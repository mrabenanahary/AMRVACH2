;===========================================================================
;    Written by G. Toth for the Versatile Advection Code
;
;    Animate slices of 3D data read by getpict or animate.
;    The functions are defined in the "Idl/animfunc.pro" file.
;    "cut" should be defined in 2D, possibly using the grid2d index array.
;
;    Usage:
;
; .r slice
;
;===========================================================================

   if not keyword_set(nfile) then begin
      print,'No file has been read yet, run getpict or animate!'
      return
   endif

   if nfile gt 1 then begin
      print,'More than one files were read...'
      print,'Probably w is from file ',filenames(nfile-1)
      physics=physicss(nfile-1)
      nfile=1
   endif

   siz=size(x)

   if siz(0) ne 4 then begin
      print,'The x array is not 3 dimensional'
      return
   endif
   n1=siz(1) & n2=siz(2) & n3=siz(3)

   print,'======= CURRENT SLICING PARAMETERS ================'
   print,'firstslice=',firstslice,', dslice=',dslice,$
        ', nslicemax=',nslicemax,', savemovie (y/n)=',savemovie,$
        FORMAT='(a,i4,a,i4,a,i4,a,a)'
   print,'ax,az=',ax,',',az,', contourlevel=',contourlevel,$
         ', velvector=',velvector,', velspeed (0..5)=',velspeed,$
        FORMAT='(a,i4,a,i3,a,i3,a,i4,a,i2)'
   if keyword_set(multiplot) then begin
        siz=size(multiplot)
        if siz(0) eq 0 then multiplot=[multiplot,1,1]
        print,'multiplot= ',multiplot,', axistype (coord/cells)=',axistype,$
        FORMAT='(a,"[",i2,",",i2,",",i2,"]",a,a)'
   endif else $
        print,'multiplot= 0 (default), axistype (coord/cells)=',axistype,$
              FORMAT='(a,a)'
   print,'bottomline=',bottomline,', headerline=',headerline,$
        FORMAT='(a,i1,a,i1)'

   if keyword_set(cut) then help,cut
   if keyword_set(velpos) then help,velpos
   velpos0=velpos

   askstr,'physics (e.g. mhd12)      ',physics,doask

   physics=strtrim(physics,2)

   physics2d=strmid(physics,0,strlen(physics)-2)+'23'
   print,'Within the slice we are using ',physics2d

   print
   help,x
   asknum,'slicedir (1, 2, or 3)',slicedir,doask
   asknum,'firstslice',firstslice,doask
   asknum,'dslice',dslice,doask

   siz=size(x)
   nslice=(siz(slicedir)-firstslice)/dslice+1
   if nslice gt nslicemax then nslice=nslicemax
   if nslice lt 1 then nslice=0
   print,'Number of slices:',nslice
   if nslice lt 1 then begin
       print,'There are no slices to be shown!'
       print,'   Check firstslice=',firstslice,' and dslice=',dslice
       if siz(slicedir) lt firstslice then $
       print,'   The value of firstslice is larger than the'
       print,'   grid size in slice direction (',slicedir,') =',siz(slicedir)
       retall
   endif

   case slicedir of
        1:begin
           x2d=dblarr(n2,n3,2)
           w2d=dblarr(n2,n3,nw)
           var2d=['y','z']
           grid2d=lindgen(n2,n3)
        end
        2:begin
           x2d=dblarr(n1,n3,2)
           w2d=dblarr(n1,n3,nw)
           var2d=['x','z']
           grid2d=lindgen(n1,n3)
        end
        3:begin
           x2d=dblarr(n1,n2,2)
           w2d=dblarr(n1,n2,nw)
           var2d=['x','y']
           grid2d=lindgen(n1,n2)
        end
   endcase
   var2d=[var2d,variables(3:n_elements(variables)-1)]

   help,grid2d

   print,'======= PLOTTING PARAMETERS ========================='
   readplotpar,2,cut,cut0,plotdim,nfunc,func,funcs,funcs1,funcs2,$
      plotmode,plotmodes,plottitle,plottitles,autorange,autoranges,doask


   usereg=0

   if keyword_set(multiplot) then begin
      multix=multiplot(0)
      multiy=multiplot(1)
      !p.multi=[0,multix,multiy,0,multiplot(2)]
   endif else begin
      multix=long(sqrt(nfunc-1)+1)
      multiy=long((nfunc-1)/multix+1)
      !p.multi=[0,multix,multiy,0,0]
   endelse

   print,'======= DETERMINE PLOTTING RANGES ==================='
   readlimits,nfunc,funcs,autoranges,noautorange,fmax,fmin,doask

   if not noautorange then $
   for islice=1,nslice do begin
      ix=dslice*(islice-1)+firstslice-1
      case slicedir of
        1:begin
           x2d(*,*,*)=x(ix,*,*,1:2)
           w2d(*,*,*)=w(ix,*,*,*)
        end
        2:begin
           x2d(*,*,0)=x(*,ix,*,0)
           x2d(*,*,1)=x(*,ix,*,2)
           w2d(*,*,*)=w(*,ix,*,*)
        end
        3:begin
           x2d(*,*,*)=x(*,*,ix,0:1)
           w2d(*,*,*)=w(*,*,ix,*)
        end
      endcase

      first= islice eq 1
      getlimits,first,nfunc,funcs,funcs1,funcs2,autoranges,fmax,fmin,doask,$
                         x2d,w2d,xreg,wreg,usereg,physics2d,eqpar,wnames,cut0

   endfor

   print
   for ifunc=0,nfunc-1 do $
        print,'Min and max value for ',funcs(ifunc),':',fmin(ifunc),fmax(ifunc)


   ;==== ANIMATE THE SLICES
   doanimate= nslice gt 1 and !d.name eq 'X'
   if doanimate then xinteranimate,set=[!d.x_size,!d.y_size,nslice]
   if !d.name eq 'X' and !d.window ge 0 then wshow

   for islice=1,nslice do begin
      ix=dslice*(islice-1)+firstslice-1
      dirname=variables(slicedir-1)
      case slicedir of
        1:begin
           x2d(*,*,*)=x(ix,*,*,1:2)
           w2d(*,*,*)=w(ix,*,*,*)
           info1='i'+dirname+'='+string(ix,format='(i4)')
           info2=dirname+'='+string(x(ix,0,0,0))
        end
        2:begin
           x2d(*,*,0)=x(*,ix,*,0)
           x2d(*,*,1)=x(*,ix,*,2)
           w2d(*,*,*)=w(*,ix,*,*)
           info1='i'+dirname+'='+string(ix,format='(i4)')
           info2=dirname+'='+string(x(0,ix,0,1))
        end
        3:begin
           x2d(*,*,*)=x(*,*,ix,0:1)
           w2d(*,*,*)=w(*,*,ix,*)
           info1='i'+dirname+'='+string(ix,format='(i4)')
           info2=dirname+'='+string(x(0,0,ix,2))
        end
      endcase
      case bottomline of
      0: info=''
      1: info=info1
      2: info=info1+' '+info2
      3: info='time='+string(time,format='(g12.5)')+' '+info1+' '+info2
      endcase

      if not keyword_set(noerase) then erase

      if velrandom then velpos=0

      plotfunc,x2d,w2d,xreg,wreg,usereg,2,physics2d,eqpar,$
        var2d,wnames,axistype,plotmodes,plottitles,$
        ax,az,contourlevel,0,$
        velvector,0,velseed,velpos,velx,vely,veltri,$
        cut,cut0,plotdim,$
        nfunc,multix,multiy,plotix,plotiy,funcs,funcs1,funcs2,fmin,fmax,f

      xyouts,5,8,/DEV,info
      putheader,1,1,0,0,headerline,headline,nx

      if doanimate then xinteranimate,frame=islice-1,window=!d.window
      
   endfor
   
   print
   !p.multi=0
   !p.title=''
   !x.title=''
   !y.title=''
   !z.title=''
   ; Restore velpos array
   velpos=velpos0 & velpos0=0

   if doanimate then xinteranimate,5,/keep_pixmaps
end
